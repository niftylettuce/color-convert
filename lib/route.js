'use strict';

var conversions = require('./conversions');
/*
	this function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/

function buildGraph() {
  var graph = {}; // https://jsperf.com/object-keys-vs-for-in-with-closure/3

  var models = Object.keys(conversions);

  for (var len = models.length, i = 0; i < len; i++) {
    graph[models[i]] = {
      // http://jsperf.com/1-vs-infinity
      // micro-opt, but this is simple.
      distance: -1,
      parent: null
    };
  }

  return graph;
} // https://en.wikipedia.org/wiki/Breadth-first_search

function deriveBFS(fromModel) {
  var graph = buildGraph();
  var queue = [fromModel]; // unshift -> queue -> pop

  graph[fromModel].distance = 0;

  while (queue.length) {
    var current = queue.pop();
    var adjacents = Object.keys(conversions[current]);

    for (var len = adjacents.length, i = 0; i < len; i++) {
      var adjacent = adjacents[i];
      var node = graph[adjacent];

      if (node.distance === -1) {
        node.distance = graph[current].distance + 1;
        node.parent = current;
        queue.unshift(adjacent);
      }
    }
  }

  return graph;
}

function link(from, to) {
  return function(args) {
    return to(from(args));
  };
}

function wrapConversion(toModel, graph) {
  var path = [graph[toModel].parent, toModel];
  var fn = conversions[graph[toModel].parent][toModel];
  var cur = graph[toModel].parent;

  while (graph[cur].parent) {
    path.unshift(graph[cur].parent);
    fn = link(conversions[graph[cur].parent][cur], fn);
    cur = graph[cur].parent;
  }

  fn.conversion = path;
  return fn;
}

function route(fromModel) {
  var graph = deriveBFS(fromModel);
  var conversion = {};
  var models = Object.keys(graph);

  for (var len = models.length, i = 0; i < len; i++) {
    var toModel = models[i];
    var node = graph[toModel];

    if (node.parent === null) {
      // no possible conversion, or this node is the source model.
      continue;
    }

    conversion[toModel] = wrapConversion(toModel, graph);
  }

  return conversion;
}

module.exports = route;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yb3V0ZS5qcyJdLCJuYW1lcyI6WyJjb252ZXJzaW9ucyIsInJlcXVpcmUiLCJidWlsZEdyYXBoIiwiZ3JhcGgiLCJtb2RlbHMiLCJPYmplY3QiLCJrZXlzIiwibGVuIiwibGVuZ3RoIiwiaSIsImRpc3RhbmNlIiwicGFyZW50IiwiZGVyaXZlQkZTIiwiZnJvbU1vZGVsIiwicXVldWUiLCJjdXJyZW50IiwicG9wIiwiYWRqYWNlbnRzIiwiYWRqYWNlbnQiLCJub2RlIiwidW5zaGlmdCIsImxpbmsiLCJmcm9tIiwidG8iLCJhcmdzIiwid3JhcENvbnZlcnNpb24iLCJ0b01vZGVsIiwicGF0aCIsImZuIiwiY3VyIiwiY29udmVyc2lvbiIsInJvdXRlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNQSxjQUFjQyxRQUFRLGVBQVIsQ0FBcEI7QUFFQTs7Ozs7Ozs7Ozs7O0FBV0EsU0FBU0MsVUFBVCxHQUFzQjtBQUNwQixNQUFNQyxRQUFRLEVBQWQsQ0FEb0IsQ0FFcEI7O0FBQ0EsTUFBTUMsU0FBU0MsT0FBT0MsSUFBUCxDQUFZTixXQUFaLENBQWY7O0FBRUEsT0FBSyxJQUFJTyxNQUFNSCxPQUFPSSxNQUFqQixFQUF5QkMsSUFBSSxDQUFsQyxFQUFxQ0EsSUFBSUYsR0FBekMsRUFBOENFLEdBQTlDLEVBQW1EO0FBQ2pETixVQUFNQyxPQUFPSyxDQUFQLENBQU4sSUFBbUI7QUFDakI7QUFDQTtBQUNBQyxnQkFBVSxDQUFDLENBSE07QUFJakJDLGNBQVE7QUFKUyxLQUFuQjtBQU1EOztBQUVELFNBQU9SLEtBQVA7QUFDRCxDLENBRUQ7OztBQUNBLFNBQVNTLFNBQVQsQ0FBbUJDLFNBQW5CLEVBQThCO0FBQzVCLE1BQU1WLFFBQVFELFlBQWQ7QUFDQSxNQUFNWSxRQUFRLENBQUNELFNBQUQsQ0FBZCxDQUY0QixDQUVEOztBQUUzQlYsUUFBTVUsU0FBTixFQUFpQkgsUUFBakIsR0FBNEIsQ0FBNUI7O0FBRUEsU0FBT0ksTUFBTU4sTUFBYixFQUFxQjtBQUNuQixRQUFNTyxVQUFVRCxNQUFNRSxHQUFOLEVBQWhCO0FBQ0EsUUFBTUMsWUFBWVosT0FBT0MsSUFBUCxDQUFZTixZQUFZZSxPQUFaLENBQVosQ0FBbEI7O0FBRUEsU0FBSyxJQUFJUixNQUFNVSxVQUFVVCxNQUFwQixFQUE0QkMsSUFBSSxDQUFyQyxFQUF3Q0EsSUFBSUYsR0FBNUMsRUFBaURFLEdBQWpELEVBQXNEO0FBQ3BELFVBQU1TLFdBQVdELFVBQVVSLENBQVYsQ0FBakI7QUFDQSxVQUFNVSxPQUFPaEIsTUFBTWUsUUFBTixDQUFiOztBQUVBLFVBQUlDLEtBQUtULFFBQUwsS0FBa0IsQ0FBQyxDQUF2QixFQUEwQjtBQUN4QlMsYUFBS1QsUUFBTCxHQUFnQlAsTUFBTVksT0FBTixFQUFlTCxRQUFmLEdBQTBCLENBQTFDO0FBQ0FTLGFBQUtSLE1BQUwsR0FBY0ksT0FBZDtBQUNBRCxjQUFNTSxPQUFOLENBQWNGLFFBQWQ7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsU0FBT2YsS0FBUDtBQUNEOztBQUVELFNBQVNrQixJQUFULENBQWNDLElBQWQsRUFBb0JDLEVBQXBCLEVBQXdCO0FBQ3RCLFNBQU8sVUFBU0MsSUFBVCxFQUFlO0FBQ3BCLFdBQU9ELEdBQUdELEtBQUtFLElBQUwsQ0FBSCxDQUFQO0FBQ0QsR0FGRDtBQUdEOztBQUVELFNBQVNDLGNBQVQsQ0FBd0JDLE9BQXhCLEVBQWlDdkIsS0FBakMsRUFBd0M7QUFDdEMsTUFBTXdCLE9BQU8sQ0FBQ3hCLE1BQU11QixPQUFOLEVBQWVmLE1BQWhCLEVBQXdCZSxPQUF4QixDQUFiO0FBQ0EsTUFBSUUsS0FBSzVCLFlBQVlHLE1BQU11QixPQUFOLEVBQWVmLE1BQTNCLEVBQW1DZSxPQUFuQyxDQUFUO0FBRUEsTUFBSUcsTUFBTTFCLE1BQU11QixPQUFOLEVBQWVmLE1BQXpCOztBQUNBLFNBQU9SLE1BQU0wQixHQUFOLEVBQVdsQixNQUFsQixFQUEwQjtBQUN4QmdCLFNBQUtQLE9BQUwsQ0FBYWpCLE1BQU0wQixHQUFOLEVBQVdsQixNQUF4QjtBQUNBaUIsU0FBS1AsS0FBS3JCLFlBQVlHLE1BQU0wQixHQUFOLEVBQVdsQixNQUF2QixFQUErQmtCLEdBQS9CLENBQUwsRUFBMENELEVBQTFDLENBQUw7QUFDQUMsVUFBTTFCLE1BQU0wQixHQUFOLEVBQVdsQixNQUFqQjtBQUNEOztBQUVEaUIsS0FBR0UsVUFBSCxHQUFnQkgsSUFBaEI7QUFDQSxTQUFPQyxFQUFQO0FBQ0Q7O0FBRUQsU0FBU0csS0FBVCxDQUFlbEIsU0FBZixFQUEwQjtBQUN4QixNQUFNVixRQUFRUyxVQUFVQyxTQUFWLENBQWQ7QUFDQSxNQUFNaUIsYUFBYSxFQUFuQjtBQUVBLE1BQU0xQixTQUFTQyxPQUFPQyxJQUFQLENBQVlILEtBQVosQ0FBZjs7QUFDQSxPQUFLLElBQUlJLE1BQU1ILE9BQU9JLE1BQWpCLEVBQXlCQyxJQUFJLENBQWxDLEVBQXFDQSxJQUFJRixHQUF6QyxFQUE4Q0UsR0FBOUMsRUFBbUQ7QUFDakQsUUFBTWlCLFVBQVV0QixPQUFPSyxDQUFQLENBQWhCO0FBQ0EsUUFBTVUsT0FBT2hCLE1BQU11QixPQUFOLENBQWI7O0FBRUEsUUFBSVAsS0FBS1IsTUFBTCxLQUFnQixJQUFwQixFQUEwQjtBQUN4QjtBQUNBO0FBQ0Q7O0FBRURtQixlQUFXSixPQUFYLElBQXNCRCxlQUFlQyxPQUFmLEVBQXdCdkIsS0FBeEIsQ0FBdEI7QUFDRDs7QUFFRCxTQUFPMkIsVUFBUDtBQUNEOztBQUVERSxPQUFPQyxPQUFQLEdBQWlCRixLQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNvbnZlcnNpb25zID0gcmVxdWlyZSgnLi9jb252ZXJzaW9ucycpO1xuXG4vKlxuXHR0aGlzIGZ1bmN0aW9uIHJvdXRlcyBhIG1vZGVsIHRvIGFsbCBvdGhlciBtb2RlbHMuXG5cblx0YWxsIGZ1bmN0aW9ucyB0aGF0IGFyZSByb3V0ZWQgaGF2ZSBhIHByb3BlcnR5IGAuY29udmVyc2lvbmAgYXR0YWNoZWRcblx0dG8gdGhlIHJldHVybmVkIHN5bnRoZXRpYyBmdW5jdGlvbi4gVGhpcyBwcm9wZXJ0eSBpcyBhbiBhcnJheVxuXHRvZiBzdHJpbmdzLCBlYWNoIHdpdGggdGhlIHN0ZXBzIGluIGJldHdlZW4gdGhlICdmcm9tJyBhbmQgJ3RvJ1xuXHRjb2xvciBtb2RlbHMgKGluY2x1c2l2ZSkuXG5cblx0Y29udmVyc2lvbnMgdGhhdCBhcmUgbm90IHBvc3NpYmxlIHNpbXBseSBhcmUgbm90IGluY2x1ZGVkLlxuKi9cblxuZnVuY3Rpb24gYnVpbGRHcmFwaCgpIHtcbiAgY29uc3QgZ3JhcGggPSB7fTtcbiAgLy8gaHR0cHM6Ly9qc3BlcmYuY29tL29iamVjdC1rZXlzLXZzLWZvci1pbi13aXRoLWNsb3N1cmUvM1xuICBjb25zdCBtb2RlbHMgPSBPYmplY3Qua2V5cyhjb252ZXJzaW9ucyk7XG5cbiAgZm9yIChsZXQgbGVuID0gbW9kZWxzLmxlbmd0aCwgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGdyYXBoW21vZGVsc1tpXV0gPSB7XG4gICAgICAvLyBodHRwOi8vanNwZXJmLmNvbS8xLXZzLWluZmluaXR5XG4gICAgICAvLyBtaWNyby1vcHQsIGJ1dCB0aGlzIGlzIHNpbXBsZS5cbiAgICAgIGRpc3RhbmNlOiAtMSxcbiAgICAgIHBhcmVudDogbnVsbFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gZ3JhcGg7XG59XG5cbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0JyZWFkdGgtZmlyc3Rfc2VhcmNoXG5mdW5jdGlvbiBkZXJpdmVCRlMoZnJvbU1vZGVsKSB7XG4gIGNvbnN0IGdyYXBoID0gYnVpbGRHcmFwaCgpO1xuICBjb25zdCBxdWV1ZSA9IFtmcm9tTW9kZWxdOyAvLyB1bnNoaWZ0IC0+IHF1ZXVlIC0+IHBvcFxuXG4gIGdyYXBoW2Zyb21Nb2RlbF0uZGlzdGFuY2UgPSAwO1xuXG4gIHdoaWxlIChxdWV1ZS5sZW5ndGgpIHtcbiAgICBjb25zdCBjdXJyZW50ID0gcXVldWUucG9wKCk7XG4gICAgY29uc3QgYWRqYWNlbnRzID0gT2JqZWN0LmtleXMoY29udmVyc2lvbnNbY3VycmVudF0pO1xuXG4gICAgZm9yIChsZXQgbGVuID0gYWRqYWNlbnRzLmxlbmd0aCwgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgYWRqYWNlbnQgPSBhZGphY2VudHNbaV07XG4gICAgICBjb25zdCBub2RlID0gZ3JhcGhbYWRqYWNlbnRdO1xuXG4gICAgICBpZiAobm9kZS5kaXN0YW5jZSA9PT0gLTEpIHtcbiAgICAgICAgbm9kZS5kaXN0YW5jZSA9IGdyYXBoW2N1cnJlbnRdLmRpc3RhbmNlICsgMTtcbiAgICAgICAgbm9kZS5wYXJlbnQgPSBjdXJyZW50O1xuICAgICAgICBxdWV1ZS51bnNoaWZ0KGFkamFjZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZ3JhcGg7XG59XG5cbmZ1bmN0aW9uIGxpbmsoZnJvbSwgdG8pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICByZXR1cm4gdG8oZnJvbShhcmdzKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHdyYXBDb252ZXJzaW9uKHRvTW9kZWwsIGdyYXBoKSB7XG4gIGNvbnN0IHBhdGggPSBbZ3JhcGhbdG9Nb2RlbF0ucGFyZW50LCB0b01vZGVsXTtcbiAgbGV0IGZuID0gY29udmVyc2lvbnNbZ3JhcGhbdG9Nb2RlbF0ucGFyZW50XVt0b01vZGVsXTtcblxuICBsZXQgY3VyID0gZ3JhcGhbdG9Nb2RlbF0ucGFyZW50O1xuICB3aGlsZSAoZ3JhcGhbY3VyXS5wYXJlbnQpIHtcbiAgICBwYXRoLnVuc2hpZnQoZ3JhcGhbY3VyXS5wYXJlbnQpO1xuICAgIGZuID0gbGluayhjb252ZXJzaW9uc1tncmFwaFtjdXJdLnBhcmVudF1bY3VyXSwgZm4pO1xuICAgIGN1ciA9IGdyYXBoW2N1cl0ucGFyZW50O1xuICB9XG5cbiAgZm4uY29udmVyc2lvbiA9IHBhdGg7XG4gIHJldHVybiBmbjtcbn1cblxuZnVuY3Rpb24gcm91dGUoZnJvbU1vZGVsKSB7XG4gIGNvbnN0IGdyYXBoID0gZGVyaXZlQkZTKGZyb21Nb2RlbCk7XG4gIGNvbnN0IGNvbnZlcnNpb24gPSB7fTtcblxuICBjb25zdCBtb2RlbHMgPSBPYmplY3Qua2V5cyhncmFwaCk7XG4gIGZvciAobGV0IGxlbiA9IG1vZGVscy5sZW5ndGgsIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjb25zdCB0b01vZGVsID0gbW9kZWxzW2ldO1xuICAgIGNvbnN0IG5vZGUgPSBncmFwaFt0b01vZGVsXTtcblxuICAgIGlmIChub2RlLnBhcmVudCA9PT0gbnVsbCkge1xuICAgICAgLy8gbm8gcG9zc2libGUgY29udmVyc2lvbiwgb3IgdGhpcyBub2RlIGlzIHRoZSBzb3VyY2UgbW9kZWwuXG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBjb252ZXJzaW9uW3RvTW9kZWxdID0gd3JhcENvbnZlcnNpb24odG9Nb2RlbCwgZ3JhcGgpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnZlcnNpb247XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcm91dGU7XG4iXX0=
